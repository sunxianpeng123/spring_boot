#chapter1
## 默认的 8080 我们将它改成 9090
#server.port=9090
## 未定义上下文路径之前 地址是 http://localhost:8080 定义了后 http://localhost:9090 你能在tomcat做的事情，配置文件都可以
#server.servlet.context-path=/chapter1
#chapter2
my1.age=25
my1.name=Luis

#日志输出
#
#SpringBoot默认为我们输出的日志级别为INFO、WARN、ERROR，如需要输出更多日志的时候，可以通过以下方式开启
#
#命令模式配置：java -jar app.jar --debug=true， 这种命令会被SpringBoot解析，且优先级最高
#资源文件配置：application.properties配置debug=true即可。该配置只对 嵌入式容器、Spring、Hibernate生效，我们自己的项目想要输出DEBUG需要额外配置（配置规则：logging.level.<logger-name>=<level>）
logging.level.root = WARN
logging.level.org.springframework.web = DEBUG
logging.level.org.hibernate = ERROR

#比如 mybatis sql日志
logging.level.org.mybatis = INFO
#logging.level.mapper所在的包 = DEBUG
#颜色编码
#如果终端支持ANSI，默认情况下会给日志上个色，提高可读性，可以在配置文件中设置spring.output.ansi.enabled来改变默认值
#ALWAYS：启用ANSI颜色的输出。
#DETECT：尝试检测ANSI着色功能是否可用。
#NEVER：禁用ANSI颜色的输出。
spring.output.ansi.enabled=always
#文件保存
#默认情况下，SpringBoot仅将日志输出到控制台，不会写入到日志文件中去。如果除了控制台输出之外还想写日志文件，则需要在application.properties设置logging.file或logging.path属性。
#logging.file：将日志写入到指定的文件中，默认为相对路径，可以设置成绝对路径
#logging.path：将名为spring.log写入到指定的文件夹中，如（/var/log）
logging.path=log/
